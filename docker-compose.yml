services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: gupload-api:latest
    container_name: gupload-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - upload_data:/app/uploads
      - ./.env:/app/.env
      - ./:/app/workspace
    environment:
      - APP_ENV=staging
      - LOG_LEVEL=info
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gupload
      - JWT_SECRET=07c3ff0575ae70aa9ffd7b51b275e85d21448d6c2c306dda3bcf9c45df0fb74b6f0e633a15414803e010b076f0f04ad30ad4f2145a3c5cdc48b5654a873788c58c06e31e719f880e179c39129e27699edb9216135daf83c7290ff9104b3c8a7e96df18a522f4764cedcdf732b56f68b2cdfcf2f1057cc05415a3039d2090ed530cbce993ae8631e382142299418d20b67c55a330ea43ee0ee49b4687a15b47324fb14cccd65c5e796b0e0a2bfeec2f280410f921213b10906477501b7114eaee0b6f427040c6999fc327105968b1b35627768337096952fa15c7fa2d7e801937e4bf3ad76bb79466ace4f1ca8670912015ff0186969384be45c3dc60be5059fa
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: gupload-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gupload
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  upload_data:
  postgres_data: